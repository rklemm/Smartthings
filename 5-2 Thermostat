/* **DISCLAIMER**
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * Without limitation of the foregoing, Contributors/Regents expressly does not warrant that:
 * 1. the software will meet your requirements or expectations;
 * 2. the software or the software content will be free of bugs, errors, viruses or other defects;
 * 3. any results, output, or data provided through or generated by the software will be accurate, up-to-date, complete or reliable;
 * 4. the software will be compatible with third party software;
 * 5. any errors in the software will be corrected.
 * The user assumes all responsibility for selecting the software and for the results obtained from the use of the software. The user shall bear the entire risk as to the quality and the performance of the software.
 */ 

/**
 *  5-2 Day Thermostat
 *
 * Base code from mwoodengr@hotmail.com, bugfixed and enhanced by RBoy
 * Changes Copyright RBoy, redistribution of any changes or modified code is not allowed without permission
 * 2015-2-11 - Fixed issue with fan mode
 * Updated: 2014-12-13
 *
 */
definition(
		name: "5-2 Day Thermostat",
		namespace: "rboy",
		author: "RBoy",
		description: "Weekday and Weekend Thermostat",
    	category: "Green Living",
    	iconUrl: "https://s3.amazonaws.com/smartapp-icons/GreenLiving/Cat-GreenLiving.png",
    	iconX2Url: "https://s3.amazonaws.com/smartapp-icons/GreenLiving/Cat-GreenLiving@2x.png",
    	iconX3Url: "https://s3.amazonaws.com/smartapp-icons/GreenLiving/Cat-GreenLiving@3x.png")

preferences {
	section("Choose thermostat ") {
		input "thermostat", "capability.thermostat", required: true
	}

    // section("Switch HVAC mode (auto to cool/heat) based on the outside temperature (optional)") {
		// input "temperatureSensor", "capability.temperatureMeasurement", required: false
		// input "temperatureH", "number", title: "Switch to heating temperature", required: false, description: "Temperature below which switch to heat mode"
		// input "temperatureC", "number", title: "Switch to cooling temperature", required: false, description: "Temperature above which switch to cool mode"
	// }

	section("Monday to Friday Schedule") {
		input "timeMFWake", "time", title: "Wake Time", required: true
		input "tempHeatMFWake", "number", title: "Wake Heat Temp", required: true
//		input "tempCoolMFWake", "number", title: "Wake Cool Temp", required: true
		input "timeMFLeave", "time", title: "Leave Time", required: true
		input "tempHeatMFLeave", "number", title: "Leave Heat Temp", required: true
//		input "tempCoolMFLeave", "number", title: "Leave Cool Temp", required: true
		input "timeMFReturn", "time", title: "Return Time", required: true
		input "tempHeatMFReturn", "number", title: "Return Heat Temp", required: true
//		input "tempCoolMFReturn", "number", title: "Return Cool Temp", required: true
		input "timeMFSleep", "time", title: "Sleep Time", required: true
		input "tempHeatMFSleep", "number", title: "Sleep Heat Temp", required: true
//		input "tempCoolMFSleep", "number", title: "Sleep Cool Temp", required: true
	}
	section("Saturday and Sunday Schedule") {
		input "timeSaSuWake", "time", title: "Wake Time", required: true
		input "tempHeatSaSuWake", "number", title: "Wake Heat Temp", required: true
//		input "tempCoolSaSuWake", "number", title: "Wake Cool Temp", required: true
		input "timeSaSuLeave", "time", title: "Leave Time", required: true
		input "tempHeatSaSuLeave", "number", title: "Leave Heat Temp", required: true
//		input "tempCoolSaSuLeave", "number", title: "Leave Cool Temp", required: true
		input "timeSaSuReturn", "time", title: "Return Time", required: true
		input "tempHeatSaSuReturn", "number", title: "Return Heat Temp", required: true
//		input "tempCoolSaSuReturn", "number", title: "Return Cool Temp", required: true
		input "timeSaSuSleep", "time", title: "Sleep Time", required: true
		input "tempHeatSaSuSleep", "number", title: "Sleep Heat Temp", required: true
//		input "tempCoolSaSuSleep", "number", title: "Sleep Cool Temp", required: true
	}
}

def installed()
{
	subscribeToEvents()
}

def updated()
{
    unsubscribe()
	subscribeToEvents()
}

def subscribeToEvents() {
	//subscribe(temperatureSensor, "temperature", temperatureHandler)
    subscribe(location, modeChangeHandler)

    initialize()
}

// Handle mode changes, reinitialize the current temperature and timers after a mode change, this is to workaround the issue of the last timer firing while in a non running mode, resume operations when supported modes are set
def modeChangeHandler(evt) {
	log.debug "Reinitializing thermostat on mode change notification, new mode $evt.value"
	//sendNotificationEvent("$thermostat Reinitializing on mode change notification, new mode $evt.value")
    initialize()
}

// This section sets the HVAC mode based outside temperature. HVAC fan mode is set to "auto".
// def temperatureHandler(evt) {
	// log.debug "Heat mode switch temperature $temperatureH, cool mode switch temperature $temperatureC"

	// if (temperatureH == null || temperatureC == null) { // We are in Auto mode or user doesn't want us to switch modes
		// return
	// }

    // def extTemp = temperatureSensor.currentTemperature
	// log.debug "External temperature is: $extTemp"
	// def thermostatState = thermostat.currentThermostatMode
	// def thermostatFan = thermostat.currentThermostatFanMode
	// log.debug "HVAC current mode $thermostatState"
	// log.debug "HVAC Fan current mode $thermostatFan"
	// if (extTemp < temperatureH) {
		// if (thermostatState == "cool") {
			// def hvacmode = "heat"
			// thermostat.setThermostatMode(hvacmode)
			// log.debug "HVAC mode set to $hvacmode"
		// }
	// }
	// else if (extTemp > temperatureC) {
		// if (thermostatState == "heat") {
			// def hvacmode = "cool"
			// thermostat.setThermostatMode(hvacmode)
			// log.debug "HVAC mode set to $hvacmode"
		// }
	// }

	// if (thermostatFan != "fanAuto") {
		// thermostat.setThermostatFanMode("auto")
		// log.debug "HVAC fan mode set to auto"
	// }
// }

// This section determines which day it is.
def initialize() {

	unschedule()
	def calendar = Calendar.getInstance()
	calendar.setTimeZone(location.timeZone)
	def today = calendar.get(Calendar.DAY_OF_WEEK)
   	def timeNow = now()
	def midnightToday = timeToday("2000-01-01T23:59:59.999-0000", location.timeZone)
   	log.debug("Current time is ${(new Date(timeNow)).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
	log.debug("Midnight today is ${midnightToday.format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
   	log.trace("Weekday schedule1 ${timeToday(timeMFWake, location.timeZone).format("HH:mm z", location.timeZone)}")
   	log.trace("Weekday schedule2 ${timeToday(timeMFLeave, location.timeZone).format("HH:mm z", location.timeZone)}")
   	log.trace("Weekday schedule3 ${timeToday(timeMFReturn, location.timeZone).format("HH:mm z", location.timeZone)}")
   	log.trace("Weekday schedule4 ${timeToday(timeMFSleep, location.timeZone).format("HH:mm z", location.timeZone)}")
   	log.trace("Weekend schedule1 ${timeToday(timeSaSuWake, location.timeZone).format("HH:mm z", location.timeZone)}")
   	log.trace("Weekend schedule2 ${timeToday(timeSaSuLeave, location.timeZone).format("HH:mm z", location.timeZone)}")
   	log.trace("Weekend schedule3 ${timeToday(timeSaSuReturn, location.timeZone).format("HH:mm z", location.timeZone)}")
   	log.trace("Weekend schedule4 ${timeToday(timeSaSuSleep, location.timeZone).format("HH:mm z", location.timeZone)}")

	// This section is where the time/temperature schedule is set
	switch (today) {
		case Calendar.MONDAY:
		case Calendar.TUESDAY:
		case Calendar.WEDNESDAY:
		case Calendar.THURSDAY:
        	if (timeNow >= timeToday(timeMFWake, location.timeZone).time && timeNow < timeToday(timeMFLeave, location.timeZone).time) { // Are we between 1st time and 2nd time
        		changeTempMFWake()
            	schedule(timeToday(timeMFLeave, location.timeZone), initialize)
                log.info("$thermostat Scheduled next adjustment () for ${timeToday(timeMFLeave, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
                sendNotificationEvent("$thermostat Scheduled next adjustment (timeMFLeave) for ${timeToday(timeMFLeave, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
        	}
        	else if (timeNow >= timeToday(timeMFLeave, location.timeZone).time && timeNow < timeToday(timeMFReturn, location.timeZone).time) { // Are we between 2nd time and 3rd time
            	changeTempMFLeave()
				schedule(timeToday(timeMFReturn, location.timeZone), initialize)
                log.info("$thermostat Scheduled next adjustment (timeMFReturn) for ${timeToday(timeMFReturn, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
                sendNotificationEvent("$thermostat Scheduled next adjustment (timeMFReturn) for ${timeToday(timeMFReturn, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
            }
            else if (timeNow >= timeToday(timeMFReturn, location.timeZone).time && timeNow < timeToday(timeMFSleep, location.timeZone).time) { // Are we between 3rd time and 4th time
            	changeTempMFReturn()
				schedule(timeToday(timeMFSleep, location.timeZone), initialize)
                log.info("$thermostat Scheduled next adjustment (timeMFSleep) for ${timeToday(timeMFSleep, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
                sendNotificationEvent("$thermostat Scheduled next adjustment (timeMFSleep) for ${timeToday(timeMFSleep, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
            }
            else if (timeNow >= timeToday(timeMFSleep, location.timeZone).time && timeNow < midnightToday.time) { // Are we between 4th time and midnight, schedule next day
            	changeTempMFSleep()
				schedule(timeToday(timeMFWake, location.timeZone) + 1, initialize)
                log.info("$thermostat Scheduled next adjustment (timeMFWake) for ${(timeToday(timeMFWake, location.timeZone) + 1).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
                sendNotificationEvent("$thermostat Scheduled next adjustment (timeMFWake) for ${(timeToday(timeMFWake, location.timeZone) + 1).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
            }
            else if (timeNow >= (midnightToday - 1).time && timeNow < timeToday(timeMFWake, location.timeZone).time) { // Are we between midnight yesterday and 1st time, schedule today
            	changeTempMFSleep()
				schedule(timeToday(timeMFWake, location.timeZone), initialize)
                log.info("$thermostat Scheduled next adjustment (timeMFWake) for ${timeToday(timeMFWake, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
                sendNotificationEvent("$thermostat Scheduled next adjustment (timeMFWake) for ${timeToday(timeMFWake, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
            }
			break

		case Calendar.FRIDAY:
        	if (timeNow >= timeToday(timeMFWake, location.timeZone).time && timeNow < timeToday(timeMFLeave, location.timeZone).time) { // Are we between 1st time and 2nd time
        		changeTempMFWake()
            	schedule(timeToday(timeMFLeave, location.timeZone), initialize)
                log.info("$thermostat Scheduled next adjustment (timeMFLeave) for ${timeToday(timeMFLeave, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
                sendNotificationEvent("$thermostat Scheduled next adjustment (timeMFLeave) for ${timeToday(timeMFLeave, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
        	}
        	else if (timeNow >= timeToday(timeMFLeave, location.timeZone).time && timeNow < timeToday(timeMFReturn, location.timeZone).time) { // Are we between 2nd time and 3rd time
            	changeTempMFLeave()
				schedule(timeToday(timeMFReturn, location.timeZone), initialize)
                log.info("$thermostat Scheduled next adjustment (timeMFReturn) for ${timeToday(timeMFReturn, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
                sendNotificationEvent("$thermostat Scheduled next adjustment (timeMFReturn) for ${timeToday(timeMFReturn, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
            }
            else if (timeNow >= timeToday(timeMFReturn, location.timeZone).time && timeNow < timeToday(timeMFSleep, location.timeZone).time) { // Are we between 3rd time and 4th time
            	changeTempMFReturn()
				schedule(timeToday(timeMFSleep, location.timeZone), initialize)
                log.info("$thermostat Scheduled next adjustment (timeMFSleep) for ${timeToday(timeMFSleep, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
                sendNotificationEvent("$thermostat Scheduled next adjustment (timeMFSleep) for ${timeToday(timeMFSleep, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
            }
            else if (timeNow >= timeToday(timeMFSleep, location.timeZone).time && timeNow < midnightToday.time) { // Are we between 4th time Friday and midnight, we schedule Saturday
            	changeTempMFSleep()
				schedule(timeToday(timeSaSuWake, location.timeZone) + 1, initialize)
                log.info("$thermostat Scheduled next adjustment (timeSaSuWake) for ${(timeToday(timeSaSuWake, location.timeZone) + 1).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
                sendNotificationEvent("$thermostat Scheduled next adjustment (timeSaSuWake) for ${(timeToday(timeSaSuWake, location.timeZone) + 1).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
            }
            else if (timeNow >= (midnightToday - 1).time && timeNow < timeToday(timeSaSuWake, location.timeZone).time) { // Are we between midnight Friday and 1st time on Saturday, we schedule Saturday
            	changeTempMFSleep()
				schedule(timeToday(timeSaSuWake, location.timeZone), initialize)
                log.info("$thermostat Scheduled next adjustment (timeSaSuWake) for ${timeToday(timeSaSuWake, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
                sendNotificationEvent("$thermostat Scheduled next adjustment (timeSaSuWake) for ${timeToday(timeSaSuWake, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
            }
			break

		case Calendar.SATURDAY:
            if (timeNow >= timeToday(timeSaSuWake, location.timeZone).time && timeNow < timeToday(timeSaSuLeave, location.timeZone).time) { // Are we between 1st time and 2nd time
        		changeTempSaSuWake()
            	schedule(timeToday(timeSaSuLeave, location.timeZone), initialize)
                log.info("$thermostat Scheduled next adjustment (timeSaSuLeave) for ${timeToday(timeSaSuLeave, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
                sendNotificationEvent("$thermostat Scheduled next adjustment (timeSaSuLeave) for ${timeToday(timeSaSuLeave, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
        	}
        	else if (timeNow >= timeToday(timeSaSuLeave, location.timeZone).time && timeNow < timeToday(timeSaSuReturn, location.timeZone).time) { // Are we between 2nd time and 3rd time
            	changeTempSaSuLeave()
				schedule(timeToday(timeSaSuReturn, location.timeZone), initialize)
                log.info("$thermostat Scheduled next adjustment (timeSaSuReturn) for ${timeToday(timeSaSuReturn, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
                sendNotificationEvent("$thermostat Scheduled next adjustment (timeSaSuReturn) for ${timeToday(timeSaSuReturn, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
            }
            else if (timeNow >= timeToday(timeSaSuReturn, location.timeZone).time && timeNow < timeToday(timeSaSuSleep, location.timeZone).time) { // Are we between 3rd time and 4th time
            	changeTempSaSuReturn()
				schedule(timeToday(timeSaSuSleep, location.timeZone), initialize)
                log.info("$thermostat Scheduled next adjustment (timeSaSuSleep) for ${timeToday(timeSaSuSleep, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
                sendNotificationEvent("$thermostat Scheduled next adjustment (timeSaSuSleep) for ${timeToday(timeSaSuSleep, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
            }
            else if (timeNow >= timeToday(timeSaSuSleep, location.timeZone).time && timeNow < midnightToday.time) { // Are we between 4th time and midnight, schedule the next day
            	changeTempSaSuSleep()
				schedule(timeToday(timeSaSuWake, location.timeZone) + 1, initialize)
                log.info("$thermostat Scheduled next adjustment (timeSaSuWake) for ${(timeToday(timeSaSuWake, location.timeZone) + 1).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
                sendNotificationEvent("$thermostat Scheduled next adjustment (timeSaSuWake) for ${(timeToday(timeSaSuWake, location.timeZone) + 1).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
            }
            else if (timeNow >= (midnightToday - 1).time && timeNow < timeToday(timeSaSuWake, location.timeZone).time) { // Are we between midnight yesterday and 1st time, schedule today
            	changeTempSaSuSleep()
				schedule(timeToday(timeSaSuWake, location.timeZone), initialize)
                log.info("$thermostat Scheduled next adjustment (timeSaSuWake) for ${timeToday(timeSaSuWake, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
                sendNotificationEvent("$thermostat Scheduled next adjustment (timeSaSuWake) for ${timeToday(timeSaSuWake, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
            }
			break

		case Calendar.SUNDAY:
            if (timeNow >= timeToday(timeSaSuWake, location.timeZone).time && timeNow < timeToday(timeSaSuLeave, location.timeZone).time) { // Are we between 1st time and 2nd time
        		changeTempSaSuWake()
            	schedule(timeToday(timeSaSuLeave, location.timeZone), initialize)
                log.info("$thermostat Scheduled next adjustment (timeSaSuLeave) for ${timeToday(timeSaSuLeave, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
                sendNotificationEvent("$thermostat Scheduled next adjustment (timeSaSuLeave) for ${timeToday(timeSaSuLeave, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
        	}
        	else if (timeNow >= timeToday(timeSaSuLeave, location.timeZone).time && timeNow < timeToday(timeSaSuReturn, location.timeZone).time) { // Are we between 2nd time and 3rd time
            	changeTempSaSuLeave()
				schedule(timeToday(timeSaSuReturn, location.timeZone), initialize)
                log.info("$thermostat Scheduled next adjustment (timeSaSuReturn) for ${timeToday(timeSaSuReturn, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
                sendNotificationEvent("$thermostat Scheduled next adjustment (timeSaSuReturn) for ${timeToday(timeSaSuReturn, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
            }
            else if (timeNow >= timeToday(timeSaSuReturn, location.timeZone).time && timeNow < timeToday(timeSaSuSleep, location.timeZone).time) { // Are we between 3rd time and 4th time
            	changeTempSaSuReturn()
				schedule(timeToday(timeSaSuSleep, location.timeZone), initialize)
                log.info("$thermostat Scheduled next adjustment (timeSaSuSleep) for ${timeToday(timeSaSuSleep, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
                sendNotificationEvent("$thermostat Scheduled next adjustment (timeSaSuSleep) for ${timeToday(timeSaSuSleep, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
            }
            else if (timeNow >= timeToday(timeSaSuSleep, location.timeZone).time && timeNow < midnightToday.time) { // Are we between 4th time Sunday and midnight, we schedule Monday
            	changeTempSaSuSleep()
				schedule(timeToday(timeMFWake, location.timeZone) + 1, initialize)
                log.info("$thermostat Scheduled next adjustment (timeMFWake) for ${(timeToday(timeMFWake, location.timeZone) + 1).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
                sendNotificationEvent("$thermostat Scheduled next adjustment (timeMFWake) for ${(timeToday(timeMFWake, location.timeZone) + 1).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
            }
            else if (timeNow >= (midnightToday - 1).time && timeNow < timeToday(timeMFWake, location.timeZone).time) { // Are we between midnight Sunday and 1st time on Monday, we schedule Monday
            	changeTempSaSuSleep()
				schedule(timeToday(timeMFWake, location.timeZone), initialize)
                log.info("$thermostat Scheduled next adjustment (timeMFWake) for ${timeToday(timeMFWake, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
                sendNotificationEvent("$thermostat Scheduled next adjustment (timeMFWake) for ${timeToday(timeMFWake, location.timeZone).format("EEE MMM dd yyyy HH:mm z", location.timeZone)}")
            }
			break
	}
}

// This section is where the thermostat temperature settings are set. 
def changeTempMFWake() {
	def thermostatState = thermostat.currentThermostatMode
	log.debug "Thermostat mode = $thermostatState"
	def thermostatFan = thermostat.currentThermostatFanMode
	log.debug "Thermostat fan = $thermostatFan"
	// if (thermostatState == "auto") {
		// thermostat.setHeatingSetpoint(tempHeatMFWake)
		// thermostat.setCoolingSetpoint(tempCoolMFWake)
        // log.info "Set $thermostat Heat $tempSetpoint1°, Cool $tempSetpointA°"
	// }
	// else if (thermostatState == "heat") {
		thermostat.setHeatingSetpoint(tempHeatMFWake)
        log.info "Set $thermostat Heat $tempHeatMFWake°"
	// }
	// else {
		// thermostat.setCoolingSetpoint(tempCoolMFWake)
        // log.info "Set $thermostat Cool $tempCoolMFWake°"
	// }
}

def changeTempMFLeave() {
	def thermostatState = thermostat.currentThermostatMode
	log.debug "Thermostat mode = $thermostatState"
	def thermostatFan = thermostat.currentThermostatFanMode
	log.debug "Thermostat fan = $thermostatFan"
	// if (thermostatState == "auto") {
		// thermostat.setHeatingSetpoint(tempHeatMFLeave)
		// thermostat.setCoolingSetpoint(tempCoolMFLeave)
        // log.info "Set $thermostat Heat $tempHeatMFLeave°, Cool $tempCoolMFLeave°"
	// }
	// else if (thermostatState == "heat") {
		thermostat.setHeatingSetpoint(tempHeatMFLeave)
	// }
	// else {
		// thermostat.setCoolingSetpoint(tempCoolMFLeave)
	// }
}

def changeTempMFReturn() {
	def thermostatState = thermostat.currentThermostatMode
	log.debug "Thermostat mode = $thermostatState"
	def thermostatFan = thermostat.currentThermostatFanMode
	log.debug "Thermostat fan = $thermostatFan"
	// if (thermostatState == "auto") {
		// thermostat.setHeatingSetpoint(tempHeatMFReturn)
		// thermostat.setCoolingSetpoint(tempCoolMFReturn)
        // log.info "Set $thermostat Heat $tempHeatMFReturn°, Cool $tempCoolMFReturn°"
	// }
	// else if (thermostatState == "heat") {
		thermostat.setHeatingSetpoint(tempHeatMFReturn)
        log.info "Set $thermostat Heat $tempHeatMFReturn°"
	// }
	// else {
		// thermostat.setCoolingSetpoint(tempCoolMFReturn)
        // log.info "Set $thermostat Cool $tempCoolMFReturn°"
	// }
}

def changeTempMFSleep() {
	def thermostatState = thermostat.currentThermostatMode
	log.debug "Thermostat mode = $thermostatState"
	def thermostatFan = thermostat.currentThermostatFanMode
	log.debug "Thermostat fan = $thermostatFan"
	// if (thermostatState == "auto") {
		// thermostat.setHeatingSetpoint(tempHeatMFSleep)
		// thermostat.setCoolingSetpoint(tempCoolMFSleep)
        // log.info "Set $thermostat Heat $tempHeatMFSleep°, Cool $tempCoolMFSleep°"
	// }
	// else if (thermostatState == "heat") {
		thermostat.setHeatingSetpoint(tempHeatMFSleep)
        log.info "Set $thermostat Heat $tempHeatMFSleep"
	// }
	// else {
		// thermostat.setCoolingSetpoint(tempCoolMFSleep)
        // log.info "Set $thermostat Cool $tempCoolMFSleep°"
	// }
}

def changeTempSaSuWake() {
	def thermostatState = thermostat.currentThermostatMode
	log.debug "Thermostat mode = $thermostatState"
	def thermostatFan = thermostat.currentThermostatFanMode
	log.debug "Thermostat fan = $thermostatFan"
	// if (thermostatState == "auto") {
		// thermostat.setHeatingSetpoint(tempHeatSaSuWake)
		// thermostat.setCoolingSetpoint(tempCoolSaSuWake)
        // log.info "Set $thermostat Heat $tempHeatSaSuWake°, Cool $tempCoolSaSuWake°"
	// }
	// else if (thermostatState == "heat") {
		thermostat.setHeatingSetpoint(tempHeatSaSuWake)
        log.info "Set $thermostat Heat $tempHeatSaSuWake"
	// }
	// else {
		// thermostat.setCoolingSetpoint(tempCoolSaSuWake)
        // log.info "Set $thermostat Cool $tempCoolSaSuWake°"
	// }
}

def changeTempSaSuLeave() {
	def thermostatState = thermostat.currentThermostatMode
	log.debug "Thermostat mode = $thermostatState"
	def thermostatFan = thermostat.currentThermostatFanMode
	log.debug "Thermostat fan = $thermostatFan"
	// if (thermostatState == "auto") {
		// thermostat.setHeatingSetpoint(tempHeatSaSuLeave)
		// thermostat.setCoolingSetpoint(tempCoolSaSuLeave)
        // log.info "Set $thermostat Heat $tempHeatSaSuLeave°, Cool $tempCoolSaSuLeave°"
	// }
	// else if (thermostatState == "heat") {
		thermostat.setHeatingSetpoint(tempHeatSaSuLeave)
        log.info "Set $thermostat Heat $tempHeatSaSuLeave"
	// }
	// else {
		// thermostat.setCoolingSetpoint(tempCoolSaSuLeave)
        // log.info "Set $thermostat Cool $tempCoolSaSuLeave°"
	// }
}

def changeTempSaSuReturn() {
	def thermostatState = thermostat.currentThermostatMode
	log.debug "Thermostat mode = $thermostatState"
	def thermostatFan = thermostat.currentThermostatFanMode
	log.debug "Thermostat fan = $thermostatFan"
	// if (thermostatState == "auto") {
		// thermostat.setHeatingSetpoint(tempHeatSaSuReturn)
		// thermostat.setCoolingSetpoint(tempCoolSaSuReturn)
        // log.info "Set $thermostat Heat $tempHeatSaSuReturn°, Cool $tempCoolSaSuReturn°"
	// }
	// else if (thermostatState == "heat") {
		thermostat.setHeatingSetpoint(tempHeatSaSuReturn)
        log.info "Set $thermostat Heat $tempHeatSaSuReturn"
	// }
	// else {
		// thermostat.setCoolingSetpoint(tempCoolSaSuReturn)
        // log.info "Set $thermostat Cool $tempCoolSaSuReturn°"
	// }
}

def changeTempSaSuSleep() {
	def thermostatState = thermostat.currentThermostatMode
	log.debug "Thermostat mode = $thermostatState"
	def thermostatFan = thermostat.currentThermostatFanMode
	log.debug "Thermostat fan = $thermostatFan"
	// if (thermostatState == "auto") {
		// thermostat.setHeatingSetpoint(tempHeatSaSuSleep)
		// thermostat.setCoolingSetpoint(tempCoolSaSuSleep)
        // log.info "Set $thermostat Heat $tempHeatSaSuSleep°, Cool $tempCoolSaSuSleep°"
	// }
	// else if (thermostatState == "heat") {
		thermostat.setHeatingSetpoint(tempHeatSaSuSleep)
        log.info "Set $thermostat Heat $tempHeatSaSuSleep°"
	// }
	// else {
		// thermostat.setCoolingSetpoint(tempCoolSaSuSleep)
        // log.info "Set $thermostat Cool $tempCoolSaSuSleep°"
	// }
}
